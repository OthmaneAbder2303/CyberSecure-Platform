/**
 * Javascript implementation of a basic Public Key Infrastructure (PKI),
 * including support for RSA public and private keys.
 *
 * @author Dave Longley
 * @modified By: OpenAI Assistant
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */

const forge = require('node-forge');

// Importation des modules n√©cessaires
require('node-forge/lib/asn1');
require('node-forge/lib/oids');
require('node-forge/lib/pem');
require('node-forge/lib/util');
require('node-forge/lib/rsa');

// Shortcut for asn.1 API
const asn1 = forge.asn1;

/* Public Key Infrastructure (PKI) implementation */
const pki = (module.exports = forge.pki = forge.pki || {});

/**
 * Converts PEM-formatted data to DER.
 *
 * @param {string} pem - The PEM-formatted data.
 * @return {forge.util.ByteBuffer} - The DER-formatted data.
 */
pki.pemToDer = function (pem) {
  try {
    const msg = forge.pem.decode(pem)[0];
    if (msg.procType && msg.procType.type === 'ENCRYPTED') {
      throw new Error('Could not convert PEM to DER; PEM is encrypted.');
    }
    return forge.util.createBuffer(msg.body);
  } catch (error) {
    console.error('Error converting PEM to DER:', error.message);
    throw error;
  }
};

/**
 * Converts an RSA private key from PEM format.
 *
 * @param {string} pem - The PEM-formatted private key.
 * @return {forge.pki.rsa.PrivateKey} - The private key.
 */
pki.privateKeyFromPem = function (pem) {
  try {
    const msg = forge.pem.decode(pem)[0];

    if (msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {
      throw new Error(
        `Could not convert private key from PEM; unsupported PEM type "${msg.type}".`
      );
    }
    if (msg.procType && msg.procType.type === 'ENCRYPTED') {
      throw new Error('Could not convert private key from PEM; PEM is encrypted.');
    }

    // Convert DER to ASN.1 object
    const obj = asn1.fromDer(msg.body);

    return pki.privateKeyFromAsn1(obj);
  } catch (error) {
    console.error('Error converting private key from PEM:', error.message);
    throw error;
  }
};

/**
 * Converts an RSA private key to PEM format.
 *
 * @param {forge.pki.rsa.PrivateKey} key - The private key.
 * @param {number} [maxline=64] - The maximum characters per line.
 * @return {string} - The PEM-formatted private key.
 */
pki.privateKeyToPem = function (key, maxline = 64) {
  try {
    // Convert to ASN.1, then DER, then PEM-encode
    const msg = {
      type: 'RSA PRIVATE KEY',
      body: asn1.toDer(pki.privateKeyToAsn1(key)).getBytes(),
    };
    return forge.pem.encode(msg, { maxline });
  } catch (error) {
    console.error('Error converting private key to PEM:', error.message);
    throw error;
  }
};

/**
 * Converts a PrivateKeyInfo to PEM format.
 *
 * @param {forge.pki.PrivateKeyInfo} pki - The PrivateKeyInfo.
 * @param {number} [maxline=64] - The maximum characters per line.
 * @return {string} - The PEM-formatted private key.
 */
pki.privateKeyInfoToPem = function (pki, maxline = 64) {
  try {
    // Convert to DER, then PEM-encode
    const msg = {
      type: 'PRIVATE KEY',
      body: asn1.toDer(pki).getBytes(),
    };
    return forge.pem.encode(msg, { maxline });
  } catch (error) {
    console.error('Error converting PrivateKeyInfo to PEM:', error.message);
    throw error;
  }
};
